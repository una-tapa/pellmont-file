// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   WebProviderAuthenticatorHelper.java

package com.ibm.ws.webcontainer.security;

import com.ibm.websphere.ras.Tr;
import com.ibm.websphere.ras.TraceComponent;
import com.ibm.ws.ffdc.FFDCFilter;
import com.ibm.ws.security.SecurityService;
import com.ibm.ws.security.authentication.*;
import com.ibm.ws.security.authentication.utility.JaasLoginConfigConstants;
import com.ibm.ws.security.registry.*;
import com.ibm.wsspi.kernel.service.utils.AtomicServiceReference;
import com.ibm.wsspi.security.token.AttributeNameConstants;
import java.io.PrintStream;
import java.util.Hashtable;
import java.util.Set;
import javax.security.auth.Subject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

// Referenced classes of package com.ibm.ws.webcontainer.security:
//            AuthenticationResult, AuthResult

public class WebProviderAuthenticatorHelper
{

    public WebProviderAuthenticatorHelper(AtomicServiceReference securityServiceRef)
    {
        this.securityServiceRef = securityServiceRef;
    }

    public AuthenticationResult loginWithUserName(HttpServletRequest req, HttpServletResponse res, String userName, Subject subj, Hashtable customProperties, boolean mapIdentityToRegistryUser)
    {
        Subject tempSubject = subj;
        if(tempSubject == null)
            tempSubject = new Subject();
        if(customProperties == null)
            customProperties = new Hashtable();
        System.out.println("DEBUG: loginWithUserName");
        SecurityService securityService = (SecurityService)securityServiceRef.getService();
        AuthenticationService authenticationService = securityService.getAuthenticationService();
        updateHashtable(userName, customProperties, mapIdentityToRegistryUser, authenticationService);
        tempSubject.getPrivateCredentials().add(customProperties);
        Subject subject = authenticateWithSubject(req, res, tempSubject);
        if(subject == null)
        {
            return new AuthenticationResult(AuthResult.FAILURE, "subject is null");
        } else
        {
            removeSecurityNameAndUniquedIdFromHashtable(subject, customProperties, mapIdentityToRegistryUser);
            AuthenticationResult authResult = new AuthenticationResult(AuthResult.SUCCESS, subject);
            return authResult;
        }
    }

    public AuthenticationResult loginWithHashtable(HttpServletRequest req, HttpServletResponse res, Subject partialSubject)
    {
        Subject subject = authenticateWithSubject(req, res, partialSubject);
        if(subject == null)
        {
            return new AuthenticationResult(AuthResult.FAILURE, "subject is null");
        } else
        {
            AuthenticationResult authResult = new AuthenticationResult(AuthResult.SUCCESS, subject);
            return authResult;
        }
    }

    private void updateHashtable(String userName, Hashtable hashtable, boolean mapIdentityToRegistryUser, AuthenticationService authenticationService)
    {
        if(mapIdentityToRegistryUser)
        {
            addUserOnlyToHashTable(userName, hashtable, authenticationService);
        } else
        {
            hashtable.put("com.ibm.wsspi.security.cred.securityName", userName);
            if(hashtable.get("com.ibm.wsspi.security.cred.uniqueId") == null)
                addUniqueIdToHashtable(hashtable, userName);
        }
    }

    private void addUniqueIdToHashtable(Hashtable hashtable, String mapUserName)
    {
        String realm = "defaultRealm";
        try
        {
            realm = ((SecurityService)securityServiceRef.getService()).getUserRegistryService().getUserRegistry().getRealm();
        }
        catch(RegistryException registryexception)
        {
            FFDCFilter.processException(registryexception, "com.ibm.ws.webcontainer.security.WebProviderAuthenticatorHelper", "122", this, new Object[] {
                hashtable, mapUserName
            });
        }
        String uniqueID = "user:" + realm + "/" + mapUserName;
        hashtable.put("com.ibm.wsspi.security.cred.uniqueId", uniqueID);
    }

    private void addUserOnlyToHashTable(String userName, Hashtable hashtable, AuthenticationService authenticationService)
    {
        if(!authenticationService.isAllowHashTableLoginWithIdOnly().booleanValue())
            hashtable.put("com.ibm.ws.authentication.internal.assertion", Boolean.TRUE);
        hashtable.put("com.ibm.wsspi.security.cred.userId", userName);
    }

    private void removeSecurityNameAndUniquedIdFromHashtable(Subject subject, Hashtable props, boolean mapIdentityToRegistryUser)
    {
        if(!mapIdentityToRegistryUser && !subject.isReadOnly())
        {
            Set privateCredentials = subject.getPrivateCredentials();
            String onlyReAddHashtableIfRemoved = System.getProperty("com.ibm.ws.webcontainer.security.only.add.if.removed");
            boolean removed = privateCredentials.remove(props);
            System.out.println((new StringBuilder()).append("DEBUG: onlyReAddHashtableIfRemoved=").append(onlyReAddHashtableIfRemoved).append(" removed=").append(removed).toString());
            if(onlyReAddHashtableIfRemoved == null)
            {
                System.out.println("DEBUG: Default behavior");
                props.remove("com.ibm.wsspi.security.cred.uniqueId");
                props.remove("com.ibm.wsspi.security.cred.securityName");
                if(!props.isEmpty())
                    privateCredentials.add(props);
            } else
            {
                System.out.println("DEBUG: pellmont fix");
                if(removed)
                {
                    props.remove("com.ibm.wsspi.security.cred.uniqueId");
                    props.remove("com.ibm.wsspi.security.cred.securityName");
                    if(!props.isEmpty())
                        privateCredentials.add(props);
                }
            }
        }
    }

    private Subject authenticateWithSubject(HttpServletRequest req, HttpServletResponse res, Subject subject)
    {
        Subject new_subject = null;
        try
        {
            AuthenticationData authenticationData = createAuthenticationData(req, res);
            new_subject = ((SecurityService)securityServiceRef.getService()).getAuthenticationService().authenticate("system.WEB_INBOUND", authenticationData, subject);
        }
        catch(AuthenticationException e)
        {
            if(TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())
                Tr.debug(tc, "Exception when performing authenticateWithSubject.", new Object[] {
                    e
                });
        }
        return new_subject;
    }

    protected AuthenticationData createAuthenticationData(HttpServletRequest req, HttpServletResponse res)
    {
        AuthenticationData authenticationData = new WSAuthenticationData();
        authenticationData.set("HTTP_SERVLET_REQUEST", req);
        authenticationData.set("HTTP_SERVLET_RESPONSE", res);
        return authenticationData;
    }

    private static final TraceComponent tc = Tr.register(com/ibm/ws/webcontainer/security/WebProviderAuthenticatorHelper, "WebAppSecurity", "com.ibm.ws.webcontainer.security.resources.WebAppSecurityMessages");
    private final AtomicServiceReference securityServiceRef;
    static final long serialVersionUID = 0xdd16de5d595116ebL;

}
